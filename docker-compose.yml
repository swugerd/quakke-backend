version: '3.8'

services:
  # Database services
  postgres-prod:
    image: postgres:15
    container_name: postgres_prod
    restart: unless-stopped
    env_file:
      - .env.pg-prod
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prod_user -d prod_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-stage:
    image: postgres:15
    container_name: postgres_stage
    restart: unless-stopped
    env_file:
      - .env.pg-stage
    volumes:
      - postgres_stage_data:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stage_user -d stage_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # PGAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: unless-stopped
    env_file:
      - .env.pg-prod
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - backend_network
    depends_on:
      - postgres-prod
      - postgres-stage

  # Backend services
  backend-prod:
    image: quakke-backend:prod
    container_name: backend_prod
    restart: unless-stopped
    env_file:
      - .env.prod
    ports:
      - "4000:4000"
    depends_on:
      postgres-prod:
        condition: service_healthy
    networks:
      - backend_network
    volumes:
      - ./prisma:/app/prisma
      - ./uploads:/app/uploads

  backend-stage:
    image: quakke-backend:stage
    container_name: backend_stage
    restart: unless-stopped
    env_file:
      - .env.stage
    ports:
      - "4001:4001"
    depends_on:
      postgres-stage:
        condition: service_healthy
    networks:
      - backend_network
    volumes:
      - ./prisma:/app/prisma
      - ./uploads:/app/uploads
networks:
  backend_network:
    driver: bridge

volumes:
  postgres_prod_data:
  postgres_stage_data:
  pgadmin_data:
